# Docker-compose and Ansible, part 2

## Getting Started with docker-compose

In the first part, we pulled a docker image. We can pull something a little more useful, though: maybe an nginx container. We can add that to our tasks:

*roles/docker-test/tasks/main.yaml*

    - name: Start nginx, exposing port 80
      docker_container:
        name: nginx
        image: nginx:1.15-alpine
        ports:
          - '80'
        recreate: yes

This pulls a very lightweight variant<sup name="a1" id="a1">[1](#f1)</sup> of nginx and tells it to run on port 80. Deploy and check:

```
(env) josh@josh-ThinkPad-T420:~/Desktop/ansible_compose$ ansible-playbook -i inventory.yaml main.yaml -l lokal_group

PLAY [lokal_group] *************************************************************

TASK [Gathering Facts] *********************************************************
ok: [lokal]

TASK [docker-test : Pull the "hello-world" image from docker] ******************
ok: [lokal]

TASK [docker-test : Start nginx, exposing port 80] *****************************
changed: [lokal]

PLAY RECAP *********************************************************************
lokal                      : ok=3    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

(env) josh@josh-ThinkPad-T420:~/Desktop/ansible_compose$ docker ps |grep nginx
0b9ad4e3da6c        nginx:1.15-alpine          "nginx -g 'daemon of…"   7 seconds ago       Up 6 seconds                    0.0.0.0:32769->80/tcp    nginx
```

If we navigate to 'localhost:32769' in our browser, we will get an HTTP response. The port might vary - docker assigns some high number.

## Adding Other Services

Most of the time, we want to run several containers - redis, nginx, memcached, python, postgres, etc. And they all need to talk to each other in some form.
We  could start them, inspect which ports are assigned, and edit config files to match, but that sounds painful
We could hardcode ports, but that also sounds less than ideal.

docker-compose can handle container management for us nicely - it will set up ports, networking etc for us.

Superset can run as a single container, but on deployment we probably want at least a postgis database and redis for caching.

```
- name: start compose
  docker_compose:
    project_name: superset
    definition:
      # YAML body
      # goes here
```

The content of a standalone compose file might be like so:


```
version: '2'
services:
  redis:
    image: redis:5-alpine
  superset_db:
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset
    image: postgres:11-alpine
  superset:
    image: catalpaio/superset
    ports:
      - "8088"
```

This is a very minimal dockerfile, it's extremely(!) disposable, don't use it for anything important until you add some persistance. This will wipe everything between restarts. If you copy it to a local dir and do a `docker-compose up`, you should have a perfectly functional and perfectly useless instance of superset running.


Let's rewrite main tasks including the yaml above.

*roles/docker-test/tasks/main.yaml*
```
- name: start compose
  docker_compose:
    project_name: superset
    definition:
      version: '2'
      services:
        redis:
          image: redis:5-alpine
        superset_db:
          environment:
            POSTGRES_USER: superset
            POSTGRES_PASSWORD: superset
          image: postgres:11-alpine
        superset:
          image: catalpaio/superset
          ports:
            - "8088"
```

```
(env) josh@josh-ThinkPad-T420:~/Desktop/ansible_compose$ ansible-playbook -i inventory.yaml main.yaml -l lokal_group
<snip>
PLAY RECAP ***********************************************************************************************************
lokal                      : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
```
Alright, no errors!

*docker ps output*
```
(env) josh@josh-ThinkPad-T420:~/Desktop/ansible_compose$ docker ps
CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                   PORTS                     NAMES
1c8d51cfde5c        redis:5-alpine       "docker-entrypoint.s…"   9 minutes ago       Up 9 minutes             6379/tcp                  superset_redis_1
07d2677962d8        catalpaio/superset   "gunicorn superset:a…"   9 minutes ago       Up 9 minutes (healthy)   0.0.0.0:32778->8088/tcp   superset_superset_1
5c6d9fc4e90d        postgres:11-alpine   "docker-entrypoint.s…"   9 minutes ago       Up 9 minutes             5432/tcp                  superset_superset_db_1
```

So - we have redis 5, postgres 11, superset (whatever)<sup name="a2" id="a2">[2](#f2)</sup> running, and superset is exposed on port 32778

### Recap

By using the `docker-compose` service in ansible we can create a docker-compose configuration in YAML and readily deploy it to any host. Next, we'll add some persistance to the mix.

<b id="f1">1</b> Docker containers based on "alpine" tend to have a much smaller size than comparable images based on say Debian or Ubuntu. [↩](#a1)

<b id="f2">2</b> This depends on whatever is published to docker hub. At time of writing that's the 0.28.1 release, which fixed time series and sankey diagrams, but broke css horribly... ymmv [↩](#a2)

