# Docker-Compose

By the end of this document:
 - Our "proof of concept" should persist its data
 - Container networking should be improved

Our 'proof of concept' runs but it is lacking a few important features. Our running containers are not linked to each other, and we also have a situation where if we drop things, we *drop* them hard. No data would persist between restarts. (not entirely true, but close enough!)

We need more control over the superset configuration. Superset allows us to do that with a settings file similar to django.

## Important Docker parameters

We've already seen how to set some env parameters necessary for postgis:

```
  superset_db:
    environment:
        POSTGRES_USER: superset
        POSTGRES_PASSWORD: superset
```

We're also able to add **volumes**. These can be set up a number of ways; most of the time docker does sensible things. A volume can be a link to a directory on the host, which is convenient, or it can be a "named volume" to a btrfs/nfs/sshfs/ etc mount. Note that you'll need permissions for the directory you link to.

### Ansible Volumes

For our simple example, we need a persistent location for our database and a persistent location for our settings file.

To create a directory, we use a task like

*Create directory task*
```yaml
- name: Creates directory
  file:
    path: /var/superset/etc/superset
    state: directory
    mode: '0777'
```

*Copy file task*
```yaml
- name: copy superset config file
  template:
    src: ../files/superset_config.template.py
    dest: /var/superset/etc/superset/superset_config.py
    mode: '0644'
```

*Add a volume to the superset container*

```       image: catalpaio/superset
          volumes:
            - /var/superset/etc/superset:/etc/superset
            - /var/superset/home/superset/app:/home/superset/app
```


For our settings file, we can use a template file, and then copy this into a docker volume which we create. This takes 3 steps:

 - create the volume
 - write the template file
 - copy the template file to the volume


### Superset Config

We still have some work to do in superset to create and init the database, and the first one requires some input from the user. For now we can do that manually with docker exec

josh@josh-ThinkPad-T420:~$ docker exec -it superset_superset_1 bash

In that container, we run:
```
FLASK_APP=superset flask fab create-admin
superset db upgrade
superset init
```

This seems to change every time superset releases, this is for superset 0.28.1

### Try It


